library(matlib)
makeCacheMatrix <- function(x = numeric())
{
  m <- NULL
  set <- function(y) {
    x <<- y
    m <<- NULL
  }
  get <- function() x
  setinv <- function(solve) m <<- solve
  getinv <- function() m
  list(set = set, get = get, setinv = setinv, getinv = getinv)
}

#The following function calculates the inverse of the special "vector" 
#created with the above function. However, it first checks to see if the inverse has already been 
#calculated. If so, it gets the inverse from the cache and skips the computation. 
#Otherwise, it calculates the inverse of the data and sets the value of the inverse in the cache via the 
#setinv function.



cacheSolve <- function(x,...) {
  #x<-as.data.frame(t(x))
  m <- x$getinv()
  if(!is.null(m)) {
    message("getting cached data")
    return(m)
  }
  #x<-as.data.frame(t(x))
  data <- x$get()
  m <- solve(data, ...)
  x$setinv(m)
  m
}
mymatrix<-matrix(c(2,3,4,5),ncol = 2) # creates a matrix
mymatrix2<-matrix(c(6,7,8,9),ncol = 2)

newmatrix <- makeCacheMatrix(mymatrix)
newmatrix2 <- makeCacheMatrix(mymatrix2)

newmatrix$get()    
newmatrix2$get()

newmatrix$getinv()           # retrieve the value of m, which should be NULL
newmatrix$set(mymatrix2)          # reset value with a new matrix
cacheSolve(newmatrix)          # notice mean calculated is mean of 30:50, not 1:10
newmatrix$getinv()
cacheSolve(newmatrix)



